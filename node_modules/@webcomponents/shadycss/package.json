{
  "_args": [
    [
      {
        "raw": "@webcomponents/shadycss@https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
        "scope": "@webcomponents",
        "escapedName": "@webcomponents%2fshadycss",
        "name": "@webcomponents/shadycss",
        "rawSpec": "https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
        "spec": "https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
        "type": "remote"
      },
      "/Users/strangemoderntimes/app-dev/reflecting-booths-html5/node_modules/skatejs-web-components"
    ]
  ],
  "_from": "https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
  "_id": "@webcomponents/shadycss@0.0.1",
  "_inCache": true,
  "_location": "/@webcomponents/shadycss",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@webcomponents/shadycss@https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
    "scope": "@webcomponents",
    "escapedName": "@webcomponents%2fshadycss",
    "name": "@webcomponents/shadycss",
    "rawSpec": "https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
    "spec": "https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
    "type": "remote"
  },
  "_requiredBy": [
    "/skatejs-web-components"
  ],
  "_resolved": "https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
  "_shasum": "421871c681610899ba10a433e4c920c9a31f4666",
  "_shrinkwrap": null,
  "_spec": "@webcomponents/shadycss@https://github.com/webcomponents/shadycss/archive/bea402d.tar.gz",
  "_where": "/Users/strangemoderntimes/app-dev/reflecting-booths-html5/node_modules/skatejs-web-components",
  "author": {
    "name": "The Polymer Authors"
  },
  "bugs": {
    "url": "https://github.com/webcomponents/shadycss/issues"
  },
  "dependencies": {},
  "description": "Styling helpers for ShadyDOM",
  "devDependencies": {
    "babel-preset-babili": "0.0.9",
    "babel-preset-es2015": "^6.18.0",
    "del": "^2.2.2",
    "eslint": "^3.4.0",
    "eslint-plugin-html": "^1.5.2",
    "gulp": "^3.8.8",
    "gulp-babel": "^6.1.2",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "1.9.0",
    "rollup-stream": "^1.14.0",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "web-component-tester": "^6.0.0-prerelease.4"
  },
  "directories": {
    "test": "tests"
  },
  "homepage": "http://webcomponents.org",
  "license": "BSD-3-Clause",
  "main": "shadycss.min.js",
  "name": "@webcomponents/shadycss",
  "optionalDependencies": {},
  "readme": "# ShadyCSS\n\nShadyCSS provides a shim for, CSS Custom Properties, CSS Mixins with `@apply` support,\nand ShadowDOM V1 style encapsulation with the ShadyDOM library.\n\n## Requirements\nShadyCSS requires support for CustomElements, ShadowDOM, MutationObserver, Promise, Object.assign\n\nThis library is distributed as ES2016 only, due to the included `<custom-style>` element definition.\n\n## Usage\n\nThe shim will transparently no-op if some or all native support is available.\n\nIf native ShadowDOM is not available, stylesheet selectors will be modified to simulate scoping.\n\nif CSS Custom Properties are not available, stylesheets will be generated with realized values for custom properties.\n\n`@apply` is not native in any browser, so they will be shimmed with CSS Custom Properties in browsers that support them, or via generated stylesheets with the CSS Custom Properties shim.\n\nTo use ShadyCSS:\n\n1. First, call `ShadyCSS.prepareTemplate(template, name)` on a\n`<template>` element that will be imported into a `shadowRoot`.\n\n2. When the element instance is connected, call `ShadyCSS.applyStyle(element)`\n\n3. Create and stamp the element's shadowRoot\n\n4. Whenever dynamic updates are required, call `ShadyCSS.applyStyle(element)`.\n\n5. If a styling change is made that may affect the whole document, call\n`ShadyCSS.updateStyles()`.\n\n### Example\n\nThe following example uses ShadyCSS and ShadyDOM to define a custom element.\n\n```html\n<template id=\"myElementTemplate\">\n  <style>\n    :host {\n      display: block;\n      padding: 8px;\n    }\n\n    #content {\n      background-color: var(--content-color);\n    }\n\n    .slot-container ::slotted(*) {\n      border: 1px solid steelblue;\n      margin: 4px;\n    }\n  </style>\n  <div id=\"content\">Content</div>\n  <div class=\"slot-container\">\n    <slot></slot>\n  </div>\n</template>\n<script>\n  ShadyCSS.prepareTemplate(myElementTemplate, 'my-element');\n  class MyElement extends HTMLElement {\n    connectedCallback() {\n      ShadyCSS.applyStyle(this);\n      if (!this.shadowRoot) {\n        this.attachShadow({mode: 'open'});\n        this.shadowRoot.appendChild(\n          document.importNode(myElementTemplate.content, true));\n      }\n    }\n  }\n\n  customElements.define('my-element', MyElement);\n</script>\n```\n\n## Type Extension elements\n\nShadyCSS can also be used with type extension elements by supplying the base\nelement name to `prepareTemplate` as a third argument.\n\n### Example\n\n```html\n<template id=\"myElementTemplate\">\n  <style>\n    :host {\n      display: block;\n      padding: 8px;\n    }\n\n    #content {\n      background-color: var(--content-color);\n    }\n\n    .slot-container ::slotted(*) {\n      border: 1px solid steelblue;\n      margin: 4px;\n    }\n  </style>\n  <div id=\"content\">Content</div>\n  <div class=\"slot-container\">\n    <slot></slot>\n  </div>\n</template>\n<script>\n  ShadyCSS.prepareTemplate(myElementTemplate, 'my-element', 'div');\n  class MyElement extends HTMLDivElement {\n    connectedCallback() {\n      ShadyCSS.applyStyle(this);\n      if (!this.shadowRoot) {\n        this.attachShadow({mode: 'open'});\n        this.shadowRoot.appendChild(\n          document.importNode(myElementTemplate.content, true));\n      }\n    }\n  }\n\n  customElements.define('my-element', MyElement, {extends: 'div'});\n</script>\n```\n\n## `<custom-style>`\n\nThe `<custom-style>` element allows `<style>` elements that are not inside of\nCustom Elements to be processed by the ShadyCSS library.\n\n### Example\n\n```html\n<custom-style>\n  <style>\n  html {\n    --content-color: brown;\n  }\n  </style>\n</custom-style>\n<my-element>This text will be brown!</my-element>\n```\n\n## Imperative values for Custom properties\n\nTo set the value of a CSS Custom Property imperatively, `ShadyCSS.applyStyle`\nand `ShadyCSS.updateStyles` support an additional argument of an object mapping\nvariable name to value.\n\nDefining new mixins or new values for current mixins imperatively is not\nsupported.\n\n### Example\n```html\n<my-element id=\"a\">Text</my-element>\n<my-element>Text</my-element>\n<script>\nlet el = document.querySelector('my-element#a');\n// Set the color of all my-element instances to 'green'\nShadyCSS.updateStyles({'--content-color', 'green'});\n// Set the color my-element#a's text to 'red'\nShadyCSS.applyStyle(el, {'--content-color', 'red'});\n</script>\n```\n\n## Limitations\n\n### Selector scoping\n\n You must have a selector to the left of the `::slotted`\n pseudo-element.\n\n### Custom properties and `@apply`\n\nDynamic changes are not automatically applied. If elements change such that they\nconditionally match selectors they did not previously, `ShadyCSS.updateStyles()`\nmust be called.\n\nFor a given element's shadowRoot, only 1 value is allowed per custom properties.\nProperties cannot change from parent to child as they can under native custom\nproperties; they can only change when a shadowRoot boundary is crossed.\n\nTo receive a custom property, an element must directly matcha selector that\ndefines the property in its host's stylesheet.\n\n### `<custom-style>` Flash of unstyled content\n\nIf `ShadyCss.applyStyle` is never called, `<custom-style>` elements will process\nafter HTML Imports have loaded, after the document loads, or after the next paint.\nThis means that there may be a flash of unstyled content on the first load.\n\nIf there are only `<custom-style>` elements in the page, you may call\n`ShadyCSS.updateStyles()` to remove the flash of unstyled content.\n\n### Mixins do not cascade throught `<slot>`\n\nCrawling the DOM and updating styles is very expensive, and we found that trying to\nupdate mixins through `<slot>` insertion points to be too expensive to justify for both\npolyfilled CSS Mixins and polyfilled CSS Custom Properties.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webcomponents/shadycss.git"
  },
  "scripts": {
    "build": "gulp",
    "test": "eslint src test && gulp test-modules && wct"
  },
  "version": "0.0.1"
}
