{"version":3,"file":null,"sources":["../src/index.js"],"sourcesContent":["import assign from 'object-assign';\nimport pascalCase from 'pascal-case';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst defaults = {\n  React,\n  ReactDOM,\n};\n\nfunction syncEvent(node, eventName, newEventHandler) {\n  const eventNameLc = eventName[0].toLowerCase() + eventName.substring(1);\n  const eventStore = node.__events || (node.__events = {});\n  const oldEventHandler = eventStore[eventNameLc];\n\n  // Remove old listener so they don't double up.\n  if (oldEventHandler) {\n    node.removeEventListener(eventNameLc, oldEventHandler);\n  }\n\n  // Bind new listener.\n  if (newEventHandler) {\n    node.addEventListener(eventNameLc, eventStore[eventNameLc] = function handler(e) {\n      newEventHandler.call(this, e);\n    });\n  }\n}\n\nexport default function (CustomElement, opts) {\n  opts = assign({}, defaults, opts);\n  if (typeof CustomElement !== 'function') {\n    throw new Error('Given element is not a valid constructor');\n  }\n  const tagName = (new CustomElement()).tagName;\n  const displayName = pascalCase(tagName);\n  const { React, ReactDOM } = opts;\n\n  if (!React || !ReactDOM) {\n    throw new Error('React and ReactDOM must be dependencies, globally on your `window` object or passed via opts.');\n  }\n\n  class ReactComponent extends React.Component {\n    static get displayName() {\n      return displayName;\n    }\n    componentDidMount() {\n      this.componentWillReceiveProps(this.props);\n    }\n    componentWillReceiveProps(props) {\n      const node = ReactDOM.findDOMNode(this);\n      Object.keys(props).forEach(name => {\n        if (name === 'children' || name === 'style') {\n          return;\n        }\n\n        if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n          syncEvent(node, name.substring(2), props[name]);\n        } else {\n          node[name] = props[name];\n        }\n      });\n    }\n    render() {\n      return React.createElement(tagName, { style: this.props.style }, this.props.children);\n    }\n  }\n\n  const proto = CustomElement.prototype;\n  Object.getOwnPropertyNames(proto).forEach(prop => {\n    Object.defineProperty(ReactComponent.prototype, prop, Object.getOwnPropertyDescriptor(proto, prop));\n  });\n\n  return ReactComponent;\n}\n"],"names":["syncEvent","node","eventName","newEventHandler","eventNameLc","toLowerCase","substring","eventStore","__events","oldEventHandler","removeEventListener","addEventListener","e","call","this","defaults","CustomElement","opts","assign","Error","tagName","displayName","pascalCase","React","ReactDOM","ReactComponent","componentWillReceiveProps","props","findDOMNode","keys","forEach","name","indexOf","toUpperCase","createElement","style","children","Component","proto","prototype","getOwnPropertyNames","defineProperty","prop","Object","getOwnPropertyDescriptor"],"mappings":"iZAUA,QAASA,GAAUC,EAAMC,EAAWC,MAC5BC,GAAcF,EAAU,GAAGG,cAAgBH,EAAUI,UAAU,GAC/DC,EAAaN,EAAKO,WAAaP,EAAKO,aACpCC,EAAkBF,EAAWH,EAG/BK,MACGC,oBAAoBN,EAAaK,GAIpCN,KACGQ,iBAAiBP,EAAaG,EAAWH,GAAe,SAAiBQ,KAC5DC,KAAKC,KAAMF,k8DAlB3BG,yBAuBS,SAAUC,EAAeC,QAC/BC,KAAWH,EAAUE,GACC,kBAAlBD,QACH,IAAIG,OAAM,+CAEZC,IAAW,GAAIJ,IAAiBI,QAChCC,EAAcC,EAAWF,KACHH,EAApBM,IAAAA,MAAOC,IAAAA,aAEVD,IAAUC,OACP,IAAIL,OAAM,oGAGZM,qLAKGC,0BAA0BZ,KAAKa,yDAEZA,MAClB1B,GAAOuB,EAASI,YAAYd,aAC3Be,KAAKF,GAAOG,QAAQ,YACZ,aAATC,GAAgC,UAATA,IAIA,IAAvBA,EAAKC,QAAQ,OAAeD,EAAK,KAAOA,EAAK,GAAGE,gBACxChC,EAAM8B,EAAKzB,UAAU,GAAIqB,EAAMI,MAEpCA,GAAQJ,EAAMI,6CAKhBR,GAAMW,cAAcd,GAAWe,MAAOrB,KAAKa,MAAMQ,OAASrB,KAAKa,MAAMS,sDApBrEf,UAFkBE,EAAMc,WA0B7BC,EAAQtB,EAAcuB,wBACrBC,oBAAoBF,GAAOR,QAAQ,mBACjCW,eAAehB,EAAec,UAAWG,EAAMC,OAAOC,yBAAyBN,EAAOI,MAGxFjB"}